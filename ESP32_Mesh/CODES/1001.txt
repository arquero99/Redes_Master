/*
  Rui Santos
  Complete project details at https://RandomNerdTutorials.com/esp-mesh-esp32-esp8266-painlessmesh/
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files.
  
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
*/

#include <Wire.h>
#include "SparkFun_SCD30_Arduino_Library.h"
#include "painlessMesh.h"
#include <Arduino_JSON.h>

// MESH Details
#define MESH_PREFIX "REDMESH_MASTER" // name for your MESH
#define MESH_PASSWORD "MESHpassword" // password for your MESH
#define MESH_PORT 5555               // default port

#define CO2_LED 15
#define SOIL_LED 2
#define EV_LED 0

// BME object on the default I2C pins
SCD30 airSensor;

// Number for this node
int nodeNumber = 1001;

// String to send to other nodes with sensor readings
String readings;

Scheduler userScheduler; // to control your personal task
painlessMesh mesh;

// User stub
void sendMessage();   // Prototype so PlatformIO doesn't complain
String getReadings(); // Prototype for sending sensor readings

// Create tasks: to send messages and get readings;
Task taskSendMessage(TASK_SECOND * 5, TASK_FOREVER, &sendMessage);

// Sensor Variables
float co2;
float temp;
float humidity;

String getReadings()
{
  JSONVar jsonReadings;
  jsonReadings["node"] = nodeNumber;
  if (!airSensor.isConnected())
  {
    Serial.println("Air sensor not detected. Please check wiring. Freezing...");
    jsonReadings["Sensor"] = "Not detected";
  }
  else
  {
    jsonReadings["Sensor"] = "SCD30";
    if (airSensor.dataAvailable())
    {
      Serial.print("co2(ppm):");
      co2 = airSensor.getCO2();
      jsonReadings["co2"] = co2;
      Serial.print(co2);

      Serial.print(" temp(C):");
      temp = airSensor.getTemperature();
      jsonReadings["temp"] = temp;
      Serial.print(temp);

      Serial.print(" humidity(%):");
      humidity = airSensor.getHumidity();
      jsonReadings["hum"] = humidity;
      Serial.print(humidity);

      Serial.println();
    }
    else
    {
      jsonReadings["co2"] = "X";
      jsonReadings["temp"] = "X";
      jsonReadings["hum"] = "X";
    }
  }
  readings = JSON.stringify(jsonReadings);
  return readings;
}

void sendMessage()
{
  String msg = getReadings();
  mesh.sendBroadcast(msg);
}

// Init BME280
void INITscd30()
{
  if (airSensor.begin(Wire, false) == false)
  {
    Serial.println("Air sensor not detected. Please check wiring. Freezing...");
    while (1)
      ;
  }
}

// Needed for painless library
void receivedCallback(uint32_t from, String &msg)
{
  digitalWrite(CO2_LED, LOW);
  digitalWrite(SOIL_LED, LOW);
  digitalWrite(EV_LED, LOW);
  Serial.printf("Received from %u msg=%s\n", from, msg.c_str());
  JSONVar myObject = JSON.parse(msg.c_str());
  int node = myObject["node"];
  Serial.print("Node: ");
  Serial.println(node);
  if (node > 1000 && node < 2000)
  {
    digitalWrite(CO2_LED, HIGH);
    double _co2 = myObject["co2"];
    double _temp = myObject["temp"];
    double _hum = myObject["hum"];
    Serial.print("CO2: ");
    Serial.print(_co2);
    Serial.println(" PPM");
    Serial.print("Temperature: ");
    Serial.print(_temp);
    Serial.println(" ºC");
    Serial.print("Humidity: ");
    Serial.print(_hum);
    Serial.println(" %");
  }
  else if (node > 2000 && node < 3000)
  {
    digitalWrite(SOIL_LED, HIGH);
    double _soilHum = myObject["soilHum"];
    Serial.print("Soil Humidity: ");
    Serial.print(_soilHum);
    Serial.println(" %");
  }
  else if (node > 3000 && node < 4000)
  {
    digitalWrite(EV_LED, HIGH);
    int _evStatus = myObject["ev_stat"];
    Serial.print("Electrovalve Status: ");
    Serial.print(_evStatus);
  }
}

void newConnectionCallback(uint32_t nodeId)
{
  Serial.printf("New Connection, nodeId = %u\n", nodeId);
}

void changedConnectionCallback()
{
  Serial.printf("Changed connections\n");
}

void nodeTimeAdjustedCallback(int32_t offset)
{
  Serial.printf("Adjusted time %u. Offset = %d\n", mesh.getNodeTime(), offset);
}

void setup()
{
  Serial.begin(115200);
  Wire.begin();
  pinMode(CO2_LED, OUTPUT);
  pinMode(SOIL_LED, OUTPUT);
  pinMode(EV_LED, OUTPUT);

  INITscd30();

  // mesh.setDebugMsgTypes( ERROR | MESH_STATUS | CONNECTION | SYNC | COMMUNICATION | GENERAL | MSG_TYPES | REMOTE ); // all types on
  mesh.setDebugMsgTypes(ERROR | STARTUP); // set before init() so that you can see startup messages

  mesh.init(MESH_PREFIX, MESH_PASSWORD, &userScheduler, MESH_PORT);
  mesh.onReceive(&receivedCallback);
  mesh.onNewConnection(&newConnectionCallback);
  mesh.onChangedConnections(&changedConnectionCallback);
  mesh.onNodeTimeAdjusted(&nodeTimeAdjustedCallback);

  userScheduler.addTask(taskSendMessage);
  taskSendMessage.enable();
}

void loop()
{
  // it will run the user scheduler as well
  mesh.update();
}




**************************
; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[env:az-delivery-devkit-v4]
platform = espressif32
board = az-delivery-devkit-v4
framework = arduino
monitor_speed = 115200
lib_deps = painlessmesh/painlessMesh @ ^1.4.5
    ArduinoJson
    arduinoUnity
    AsyncTCP
    TaskSchedulerc
    adafruit/Adafruit Unified Sensor @ ^1.1.4
    arduino-libraries/Arduino_JSON @ ^0.1.0
    sparkfun/SparkFun SCD30 Arduino Library@^1.0.20




//////////////////////////////// VERSION Q NO COMPILA POR LIBS//////////////////////////////////////////

#include <Arduino.h>
#include <Arduino_JSON.h>
#include <Wire.h>
#include "painlessMesh.h"
#include "SparkFun_SCD30_Arduino_Library.h"

// MESH Details
#define MESH_PREFIX "REDMESH_MASTER" // name for your MESH
#define MESH_PASSWORD "MESHpassword" // password for your MESH
#define MESH_PORT 5555               // default port

#define CO2_LED 15
#define SOIL_LED 2
#define EV_LED 0

// BME object on the default I2C pins
SCD30 airSensor;

// Number for this node
int nodeNumber = 1001;

// String to send to other nodes with sensor readings
String readings;

Scheduler userScheduler; // to control your personal task
painlessMesh mesh;

// User stub
void sendMessage();   // Prototype so PlatformIO doesn't complain
String getReadings(); // Prototype for sending sensor readings

// Create tasks: to send messages and get readings;
Task taskSendMessage(TASK_SECOND * 5, TASK_FOREVER, &sendMessage);

// Sensor Variables
float co2;
float temp;
float humidity;

String getReadings()
{
  JSONVar jsonReadings;
  jsonReadings["node"] = nodeNumber;
  if (!airSensor.isConnected())
  {
    Serial.println("Air sensor not detected. Please check wiring. Freezing...");
    jsonReadings["Sensor"] = "Not detected";
  }
  else
  {
    jsonReadings["Sensor"] = "SCD30";
    if (airSensor.dataAvailable())
    {
      Serial.print("co2(ppm):");
      co2 = airSensor.getCO2();
      jsonReadings["co2"] = co2;
      Serial.print(co2);

      Serial.print(" temp(C):");
      temp = airSensor.getTemperature();
      jsonReadings["temp"] = temp;
      Serial.print(temp);

      Serial.print(" humidity(%):");
      humidity = airSensor.getHumidity();
      jsonReadings["hum"] = humidity;
      Serial.print(humidity);

      Serial.println();
    }
    else
    {
      jsonReadings["co2"] = "X";
      jsonReadings["temp"] = "X";
      jsonReadings["hum"] = "X";
    }
  }
  readings = JSON.stringify(jsonReadings);
  return readings;
}

void sendMessage()
{
  String msg = getReadings();
  mesh.sendBroadcast(msg);
}

// Init BME280
void INITscd30()
{
  if (airSensor.begin(Wire, false) == false)
  {
    Serial.println("Air sensor not detected. Please check wiring. Freezing...");
    while (1)
      ;
  }
}

// Needed for painless library
void receivedCallback(uint32_t from, String &msg)
{
  digitalWrite(CO2_LED, LOW);
  digitalWrite(SOIL_LED, LOW);
  digitalWrite(EV_LED, LOW);
  Serial.printf("Received from %u msg=%s\n", from, msg.c_str());
  JSONVar myObject = JSON.parse(msg.c_str());
  int node = myObject["node"];
  Serial.print("Node: ");
  Serial.println(node);
  if (node > 1000 && node < 2000)
  {
    digitalWrite(CO2_LED, HIGH);
    double _co2 = myObject["co2"];
    double _temp = myObject["temp"];
    double _hum = myObject["hum"];
    Serial.print("CO2: ");
    Serial.print(_co2);
    Serial.println(" PPM");
    Serial.print("Temperature: ");
    Serial.print(_temp);
    Serial.println(" ºC");
    Serial.print("Humidity: ");
    Serial.print(_hum);
    Serial.println(" %");
  }
  else if (node > 2000 && node < 3000)
  {
    digitalWrite(SOIL_LED, HIGH);
    double _soilHum = myObject["soilHum"];
    Serial.print("Soil Humidity: ");
    Serial.print(_soilHum);
    Serial.println(" %");
  }
  else if (node > 3000 && node < 4000)
  {
    digitalWrite(EV_LED, HIGH);
    int _evStatus = myObject["ev_stat"];
    Serial.print("Electrovalve Status: ");
    Serial.print(_evStatus);
  }
}

void newConnectionCallback(uint32_t nodeId)
{
  Serial.printf("New Connection, nodeId = %u\n", nodeId);
}

void changedConnectionCallback()
{
  Serial.printf("Changed connections\n");
}

void nodeTimeAdjustedCallback(int32_t offset)
{
  Serial.printf("Adjusted time %u. Offset = %d\n", mesh.getNodeTime(), offset);
}

void setup()
{
  Serial.begin(115200);
  pinMode(CO2_LED, OUTPUT);
  pinMode(SOIL_LED, OUTPUT);
  pinMode(EV_LED, OUTPUT);

  INITscd30();

  // mesh.setDebugMsgTypes( ERROR | MESH_STATUS | CONNECTION | SYNC | COMMUNICATION | GENERAL | MSG_TYPES | REMOTE ); // all types on
  mesh.setDebugMsgTypes(ERROR | STARTUP); // set before init() so that you can see startup messages

  mesh.init(MESH_PREFIX, MESH_PASSWORD, &userScheduler, MESH_PORT);
  mesh.onReceive(&receivedCallback);
  mesh.onNewConnection(&newConnectionCallback);
  mesh.onChangedConnections(&changedConnectionCallback);
  mesh.onNodeTimeAdjusted(&nodeTimeAdjustedCallback);

  userScheduler.addTask(taskSendMessage);
  taskSendMessage.enable();
}

void loop()
{
  // it will run the user scheduler as well
  mesh.update();
}





////////////////////////////////////////




[env:az-delivery-devkit-v4]
platform = espressif32
board = az-delivery-devkit-v4
framework = arduino
monitor_speed = 115200
lib_deps = 
	painlessmesh/painlessMesh@^1.5.0
	me-no-dev/AsyncTCP@^1.1.1
	arkhipenko/TaskScheduler@^3.7.0
	sparkfun/SparkFun SCD30 Arduino Library@^1.0.20
	arduino-libraries/Arduino_JSON@^0.2.0
    ArduinoJson
